// 객체 프로토 타입
// 프로토타입은 자바스크립트 객체가 서로 기능을 상속하는 방식의 메커니즘 입니다.
// 객체는 템플릿 객체 역활을 하는 프로토타입 객체를 가질수 있습니다.
// 특정한 객체 , 즉 배열을 예로 들자면 하나의 배열은 여러 메서드를 갖습니다.
// 배열은 자바스크립트에서 객체 입니다.
// 배열 메서드는 __proto__라는 특성안에 있습니다.
// __proto__는 배열 프로토타입을 참조하는 특성입니다.
// 배열 __proto__는 프로토타입이 배열의 템플릿 객체 입니다.
// 프로토타입은 모든 메서드를 담고 자바스크립트를 통해 배열 메서드를 간단하게 할수있습니다.
// 하나의 프로토타입이 있고 각각의 배열이 __proto__라는 특별한 특성으로 그 프로토타입을 참조하는것입니다.
// 다른 종류의 객체에 대한 프로토타입인 하나의 객체가 있습니다.
// 나만의 객체타입 즉 , 완전히 새로운 객체를 정의하고 배열 프로토타입에 그 프로토타입을 설정할수있습니다.
// 프로토타입은 템플릿 객체와도 같습니다.
// 우리는 같은 프로토타입을 공유하는 여러 객체를 만들수 있고 복사할 필요 없이 같은 메서드에 접근할수 있습니다.
// 원시타입 같은 경우도 자바스크립트에서 모두 중간 객체 리퍼를 갖기 때문에 모든 메서드가 생겨납니다. 


// 나만의 메서드도 만들수 있습니다

// String.prototype.jaeho = () => alert("go way!")


String.prototype.yell = function(){
    console.log(this)
}

"hello".yell // 결과값 String{"hello "}

// 배열 프로토타입에도 무언가 추가할수 있습니다.

Array.prototype.pop = function(){
    return "SORRY I WANT THAT ELEMENT"
} 

[3,4,5].pop() // 결과값 "SORRY I WANT THAT ELEMENT"

// 왜 이런 결과가 나오냐면 공통 특성과 메서들르 포함하는 하나의 객체를 갖는다고 요약할수 있습니다.
// 다른 문자열이나 배열의 다른 객체가 공동 특성을 찾기 위해 이들 특성과 메서드를 찾는것입니다 = 저장소


// __proto__와 prototype 차이는 Array.prototype 같은경우는 메서드나 특성을 추가하는 실제 객체입니다.
// __proto__ 는 참조입니다 __proto__ 는 배열이나 문자열의 특성 이름입니다, 객체 문자열 프로토타입에 대한 참조인것입니다.`